name: CheckInApp Database Backup
# Updated to use actions/upload-artifact@v4 (was @v3)

on:
  schedule:
    # Daily full backup at 2 AM UTC
    - cron: '0 2 * * *'
    # Hourly incremental backups
    - cron: '0 */1 * * *'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Backup Type'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set backup type
      id: backup-type
      run: |
        if [ "${{ github.event.schedule }}" = "0 2 * * *" ] || [ "${{ github.event.inputs.backup_type }}" = "full" ]; then
          echo "type=full" >> $GITHUB_OUTPUT
        else
          echo "type=incremental" >> $GITHUB_OUTPUT
        fi

    - name: Create backup via API
      env:
        RAILWAY_APP_URL: ${{ secrets.RAILWAY_APP_URL }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      run: |
        # Create timestamp
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BACKUP_TYPE="${{ steps.backup-type.outputs.type }}"

        echo "Creating $BACKUP_TYPE backup at $TIMESTAMP"

        # Login and download backup from API using session authentication
        # Step 1: Login to create session and save cookies
        curl -c cookies.txt \
          -X POST \
          -H "Content-Type: application/json" \
          -d "{\"password\":\"$ADMIN_PASSWORD\"}" \
          "$RAILWAY_APP_URL/api/auth/login"

        # Step 2: Use session cookies for authenticated backup
        curl -b cookies.txt \
          -X GET \
          "$RAILWAY_APP_URL/api/backup" \
          -o "backup_${BACKUP_TYPE}_${TIMESTAMP}.json"

        # Verify backup was created
        if [ -f "backup_${BACKUP_TYPE}_${TIMESTAMP}.json" ] && [ -s "backup_${BACKUP_TYPE}_${TIMESTAMP}.json" ]; then
          echo "Backup created successfully"
          ls -lh backup_*.json

          # Verify JSON format
          if jq empty "backup_${BACKUP_TYPE}_${TIMESTAMP}.json"; then
            echo "Backup JSON is valid"

            # Get backup statistics
            TEAMS=$(jq -r '.tables.teams | length' "backup_${BACKUP_TYPE}_${TIMESTAMP}.json")
            MEMBERS=$(jq -r '.tables.team_members | length' "backup_${BACKUP_TYPE}_${TIMESTAMP}.json")

            echo "Backup contains: $TEAMS teams, $MEMBERS members"
          else
            echo "ERROR: Backup JSON is invalid!"
            exit 1
          fi
        else
          echo "ERROR: Backup creation failed!"
          exit 1
        fi

    - name: Upload backup to GitHub releases
      uses: softprops/action-gh-release@v1
      if: steps.backup-type.outputs.type == 'full'
      with:
        tag_name: backup-${{ github.run_number }}
        name: "Database Backup - $(date +%Y-%m-%d)"
        files: backup_*.json
        body: |
          Automated database backup created on $(date)

          This backup contains:
          - Teams and team members
          - Events and matches
          - Player disciplinary records
          - Team managers and referees

          **To restore this backup:**
          1. Download the backup file
          2. POST the JSON data to `/api/backup` with admin authentication
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Store incremental backup as artifact
      uses: actions/upload-artifact@v4
      if: steps.backup-type.outputs.type == 'incremental'
      with:
        name: incremental-backup-${{ github.run_number }}
        path: backup_*.json
        retention-days: 7

    - name: Verify backup integrity
      run: |
        # Basic integrity checks
        for backup_file in backup_*.json; do
          echo "Verifying $backup_file..."

          # Check required tables exist
          tables=("teams" "team_members" "events" "matches")
          for table in "${tables[@]}"; do
            if jq -e ".tables.$table" "$backup_file" > /dev/null; then
              count=$(jq -r ".tables.$table | length" "$backup_file")
              echo "✓ $table: $count records"
            else
              echo "✗ $table: missing from backup"
              exit 1
            fi
          done

          echo "Backup verification completed successfully"
        done

    - name: Send notification on failure
      if: failure()
      run: |
        echo "Backup process failed!"
        # Here you could add webhook notifications, Slack alerts, etc.
        # curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
        #   -H 'Content-type: application/json' \
        #   --data '{"text":"⚠️ CheckInApp backup failed!"}'

  cleanup:
    runs-on: ubuntu-latest
    needs: backup
    if: always()

    steps:
    - name: Cleanup old backups
      run: |
        echo "Cleaning up old backup artifacts..."
        # GitHub automatically handles artifact retention
        # But you could add custom cleanup logic here if needed
